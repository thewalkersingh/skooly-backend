package com.skooly.backend.entity;
import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "students")
public class Student {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @Column(nullable = false)
   private String firstName;

   @Column(nullable = false)
   private String lastName;
   private String address;

   @Column(nullable = false)
   private String contactNumber;

   @Column(nullable = false, unique = true)
   private String email;

   @Column(nullable = false)
   private String parentsName;

   @Column(nullable = false)
   private String grade;

   @Column(nullable = false)
   private String age;

   @ManyToOne
   @JoinColumn(name = "school_id")
   @JsonBackReference
   private School school;
}

package com.skooly.backend.dto;
import jakarta.validation.constraints.*;
import lombok.*;

@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class StudentDTO {
   private Long id;

   @NotBlank(message = "First name is required")
   private String firstName;

   @NotBlank(message = "Last name is required")
   private String lastName;
   private String address;

   @NotBlank(message = "Contact number is required")
   private String contactNumber;

   @NotBlank(message = "Email is required")
   @Email(message = "Email should be valid")
   private String email;

   @NotBlank(message = "Parents' name is required")
   private String parentsName;

   @NotBlank(message = "Grade is required")
   private String grade;

   @NotNull(message = "Age is required")
   @Min(value = 5, message = "Age should be at least 5")
   @Max(value = 18, message = "Age should be at most 18")
   private Integer age;

   @NotNull(message = "School ID is required")
   private Long schoolId;
}

package com.skooly.backend.mapper;
import com.skooly.backend.dto.StudentDTO;
import com.skooly.backend.entity.Student;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

@Mapper(componentModel = "spring")
public interface StudentMapper {
   @Mapping(source = "school.id", target = "schoolId")
   StudentDTO toDTO(Student student);

   // When converting from DTO to entity, we typically ignore the school since we will set that in service logic.
   @Mapping(target = "school", ignore = true)
   Student toEntity(StudentDTO studentDTO);

   @Mapping(target = "id", ignore = true)
   @Mapping(target = "school", ignore = true)
   void updateStudentFromDTO(StudentDTO studentDTO, @MappingTarget Student student);
}


package com.skooly.backend.service;
import com.skooly.backend.dto.StudentDTO;
import com.skooly.backend.entity.School;
import com.skooly.backend.entity.Student;
import com.skooly.backend.exception.SchoolNotFoundException;
import com.skooly.backend.exception.StudentNotFoundException;
import com.skooly.backend.mapper.StudentMapper;
import com.skooly.backend.repository.SchoolRepository;
import com.skooly.backend.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class StudentService {
   private final StudentRepository studentRepository;
   private final StudentMapper studentMapper;
   private final SchoolRepository schoolRepository;

   @Autowired
   public StudentService(StudentRepository studentRepository, StudentMapper studentMapper,
		   SchoolRepository schoolRepository) {
	  this.studentRepository = studentRepository;
	  this.studentMapper = studentMapper;
	  this.schoolRepository = schoolRepository;
   }

   public List<StudentDTO> getAllStudents() {
	  return studentRepository.findAll().stream()
							  .map(studentMapper::toDTO)
							  .collect(Collectors.toList());
   }

   public StudentDTO saveStudent(StudentDTO studentDTO) {
	  Student student = studentMapper.toEntity(studentDTO);
	  if(studentDTO.getSchoolId() != null){
		 School school = schoolRepository.findById(studentDTO.getSchoolId())
										 .orElseThrow(() -> new SchoolNotFoundException("School not found"));
		 student.setSchool(school);
	  }
	  Student savedStudent = studentRepository.save(student);
	  return studentMapper.toDTO(savedStudent);
   }

   public String saveAll(List<StudentDTO> studentDTOS) {
	  List<Student> entities = studentDTOS.stream().map(studentMapper::toEntity).collect(Collectors.toList());
	  studentRepository.saveAll(entities);
	  return "All students saved successfully!";
   }

   public StudentDTO updateStudent(Long id, StudentDTO studentDTO) {
	  Student student = studentRepository.findById(id).orElseThrow(() -> new StudentNotFoundException("Student not found"));
	  studentMapper.updateStudentFromDTO(studentDTO, student);
	  Student updatedStudent = studentRepository.save(student);
	  return studentMapper.toDTO(updatedStudent);
   }

   public void deleteStudent(Long id) {
	  studentRepository.deleteById(id);
   }
}


package com.skooly.backend.controller;
import com.skooly.backend.dto.StudentDTO;
import com.skooly.backend.service.StudentService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/students")
//@CrossOrigin(origins = "http://localhost:5173")
@Validated
public class StudentController {
   private final StudentService studentService;

   @Autowired
   public StudentController(StudentService studentService) {
	  this.studentService = studentService;
   }

   @GetMapping("/all")
   public List<StudentDTO> getAllStudents() {
	  return studentService.getAllStudents();
   }

   @PostMapping
   public StudentDTO createStudent(@Valid @RequestBody StudentDTO studentDTO) {
	  return studentService.saveStudent(studentDTO);
   }

   // Bulk-create schools expects a JSON array of StudentDTO objects.
   @PostMapping("/batch")
   public String createStudents(@RequestBody List<@Valid StudentDTO> studentDTOS) {
	  return studentService.saveAll(studentDTOS);
   }

   @PutMapping("/{id}")
   public StudentDTO updateStudent(@PathVariable Long id, @Valid @RequestBody StudentDTO studentDTO) {
	  return studentService.updateStudent(id, studentDTO);
   }

   @DeleteMapping("/{id}")
   public void deleteStudent(@PathVariable Long id) {
	  studentService.deleteStudent(id);
   }
}


@RestControllerAdvice
public class GlobalExceptionHandler {
   @ExceptionHandler(SchoolNotFoundException.class)
   public ResponseEntity<?> handleSchoolNotFoundException(SchoolNotFoundException ex) {
	  // You can customize the error response as needed (e.g., using a custom error response DTO)
	  return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
   }

   // Add more exception handlers for different custom exceptions or generic handlers
   @ExceptionHandler(Exception.class)
   public ResponseEntity<?> handleGenericException(Exception ex) {
	  return new ResponseEntity<>("An error occurred: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
   }

   @ExceptionHandler(StudentNotFoundException.class)
   public ResponseEntity<?> handleStudentNotFoundException(StudentNotFoundException ex) {
	  return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
   }
}


package com.skooly.backend.exception;
public class StudentNotFoundException extends RuntimeException {
   public StudentNotFoundException(String message) {
	  super(message);
   }

   public StudentNotFoundException(String message, Throwable cause) {
	  super(message, cause);
   }
}