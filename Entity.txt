package com.skooly.backend.entity;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Entity
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "schools")
public class School {
   @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id;
   private String name;
   private String address;
   private String contactNumber;
   private String email;
   private LocalDate creationDate;
   private String schoolType;
   private Integer studentCount;

   @OneToMany(mappedBy = "school", cascade = CascadeType.ALL, orphanRemoval = true)
   private List<Student> students = new ArrayList<>();

   @OneToMany(mappedBy = "school", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
   @JsonManagedReference  // Helps to avoid infinite recursion when serializing to JSON
   private List<Teacher> teachers = new ArrayList<>();
}


@Entity
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "students")
public class Student {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @Column(nullable = false)
   private String firstName;

   @Column(nullable = false)
   private String lastName;
   private String address;

   @Column(nullable = false)
   private String contactNumber;

   @Column(nullable = false, unique = true)
   private String email;

   @Column(nullable = false)
   private String parentsName;

   @Column(nullable = false)
   private String grade;

   @Column(nullable = false)
   private Integer age;

   @ManyToOne
   @JoinColumn(name = "school_id")
   @JsonBackReference
   private School school;

   @ManyToMany(mappedBy = "students")
   @JsonBackReference(value = "course-student")
   private List<Course> courses = new ArrayList<>();

   @OneToMany(mappedBy = "student", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
   private List<Attendance> attendanceRecords = new ArrayList<>();

   @OneToMany(mappedBy = "student", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
   private List<Submission> submissions = new ArrayList<>();

   @OneToMany(mappedBy = "student")
   private List<FeeRecord> feeRecords;
}

@Table(name = "teachers")
public class Teacher {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @Column(nullable = false)
   private String firstName;

   @Column(nullable = false)
   private String lastName;

   @Column(nullable = false, unique = true)
   private String email;

   @Column(nullable = false)
   private String subject;

   @Column(nullable = false)
   private String contactNumber;

   @ManyToOne
   @JoinColumn(name = "school_id")
   private School school;
   // Link to courses taught by this teacher.
   @OneToMany(mappedBy = "teacher", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
   @JsonManagedReference   // Managed side for Teacher->Course relationship.
   private List<Course> courses = new ArrayList<>();

   @OneToMany(mappedBy = "gradedBy", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
   private List<Grade> gradedAssignments = new ArrayList<>();
}


@Table(name = "assignments")
public class Assignment {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;
   private String title;
   private String description;

   @Column(nullable = false)
   private LocalDate dueDate;

   @ManyToOne
   @JoinColumn(name = "course_id", nullable = false)
   private Course course;
}


@Table(name = "attendance")
public class Attendance {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @ManyToOne
   @JoinColumn(name = "student_id", nullable = false)
   private Student student;

   @Column(nullable = false)
   private LocalDate date;

   @Enumerated(EnumType.STRING)
   @Column(nullable = false)
   private AttendanceStatus status;  // Present, Absent, Late, etc.

   private String remarks;  // Optional comments (e.g., "Sick leave")
}

public enum AttendanceStatus {
   PRESENT,
   ABSENT,
   LATE,
   EXCUSED
}

@Table(name = "courses")
public class Course {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @Column(nullable = false)
   private String courseCode;  // Unique course code

   @Column(nullable = false)
   private String name;        // Course title
   private String description; // Optional description
   private String schedule;    // You can store schedule details as a string

   @ManyToOne
   @JoinColumn(name = "teacher_id")
   @JsonBackReference   // Prevents infinite recursion when serializing Teacher->Course->Teacher
   private Teacher teacher;
   // Many courses can have many students
   @ManyToMany
   @JoinTable(name = "course_student",
		   joinColumns = @JoinColumn(name = "course_id"),
		   inverseJoinColumns = @JoinColumn(name = "student_id"))
   @JsonManagedReference(value = "course-student")
   private List<Student> students = new ArrayList<>();

   @OneToMany(mappedBy = "course", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
   private List<Assignment> assignments = new ArrayList<>();

}


@Table(name = "grades")
public class Grade {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @ManyToOne
   @JoinColumn(name = "submission_id", nullable = false)
   private Submission submission;

   @ManyToOne
   @JoinColumn(name = "teacher_id", nullable = false)
   private Teacher gradedBy;
   private Integer score;
   private String feedback;
}


@Entity
public class Invoice {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;
   private String invoiceNumber;
   private LocalDate issuedDate;
   private Double amountPaid;

   @ManyToOne
   @JoinColumn(name = "student_id")
   private Student student;
}

@Entity
public class OverduePayment {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;
   private Double overdueAmount;
   private LocalDate overdueDate;
   private boolean resolved;

   @ManyToOne
   @JoinColumn(name = "student_id")
   private Student student;
}


@Entity
public class Payment {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;
   private Double amountPaid;
   private LocalDate paymentDate;

   @ManyToOne
   @JoinColumn(name = "student_id")
   private Student student;

   @ManyToOne
   @JoinColumn(name = "fee_record_id")
   private FeeRecord feeRecord;
}


@Table(name = "submissions")
public class Submission {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;

   @ManyToOne
   @JoinColumn(name = "assignment_id", nullable = false)
   private Assignment assignment;

   @ManyToOne
   @JoinColumn(name = "student_id", nullable = false)
   private Student student;
   private String fileUrl; // URL of the submitted assignment file

   @Column(nullable = false)
   private LocalDateTime submittedAt;

   @Enumerated(EnumType.STRING)
   @Column(nullable = false)
   private SubmissionStatus status;
}

public enum SubmissionStatus {
   SUBMITTED, LATE, PENDING_GRADING
}